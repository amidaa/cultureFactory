<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.first.group.dao.UserInformationMapper">
  <resultMap id="BaseResultMap" type="com.first.group.entity.UserInformation">
    <result column="userid" jdbcType="VARCHAR" property="userid" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="gender" jdbcType="VARCHAR" property="gender" />
    <result column="birthday" jdbcType="VARCHAR" property="birthday" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="tel" jdbcType="VARCHAR" property="tel" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="photo" jdbcType="VARCHAR" property="photo" />
    <result column="hiredate" jdbcType="TIMESTAMP" property="hiredate" />
    <result column="password" jdbcType="VARCHAR" property="password" />
  </resultMap>


  <!-- 封装映射conditions表数据，friends表与conditions表1对多关系，配置1对多的映射
            association:用于配置1对1的映射
		                属性property：conditions对象在friend对象中的属性名
		                属性javaType：conditions属性的java对象 类型
		                属性column：friend表中的外键引用conditions表
-->
  <resultMap id="UserLoginResultMap" type="com.first.group.entity.UserInformation" autoMapping="true">
    <id column="userid" property="userid" />    <!-- id 很重要 -->
    <result column="userid" jdbcType="VARCHAR" property="userid" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="gender" jdbcType="VARCHAR" property="gender" />
    <result column="birthday" jdbcType="VARCHAR" property="birthday" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="tel" jdbcType="VARCHAR" property="tel" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="photo" jdbcType="VARCHAR" property="photo" />
    <result column="hiredate" jdbcType="TIMESTAMP" property="hiredate" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <association property="roleAuthorities" autoMapping="true"
                 javaType="com.first.group.entity.UserRoles" >
      <id column="id" property="id" />
    </association>
  </resultMap>

  <resultMap id="UserWagesResultMap" type="com.first.group.entity.UserInformation" autoMapping="true">
    <id column="userid" property="userid" />    <!-- id 很重要 -->
    <result column="userid" jdbcType="VARCHAR" property="userid" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="gender" jdbcType="VARCHAR" property="gender" />
    <collection property="userWages" autoMapping="true" column="userid"
                 ofType="com.first.group.entity.UserWages">
      <id column="wageid" property="wageid" />
      <result column="wages" jdbcType="VARCHAR" property="wages" />
      <result column="reward" jdbcType="VARCHAR" property="reward" />
    </collection>
  </resultMap>

  <insert id="insert" parameterType="com.first.group.entity.UserInformation">
    insert ignore into user_information (userid, username, gender,birthday, address, tel,email, photo, hiredate,
      password)values (#{userid,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR}, #{gender,jdbcType=VARCHAR},
      #{birthday,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, #{tel,jdbcType=VARCHAR}, 
      #{email,jdbcType=VARCHAR}, #{photo,jdbcType=VARCHAR}, #{hiredate,jdbcType=TIMESTAMP}, 
      #{password,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.first.group.entity.UserInformation" useGeneratedKeys="true">
    insert into user_information
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userid != null">
        userid,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="gender != null">
        gender,
      </if>
      <if test="birthday != null">
        birthday,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="tel != null">
        tel,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="photo != null">
        photo,
      </if>
      <if test="hiredate != null">
        hiredate,
      </if>
      <if test="password != null">
        password,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userid != null">
        #{userid,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        #{gender,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null">
        #{birthday,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="tel != null">
        #{tel,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="photo != null">
        #{photo,jdbcType=VARCHAR},
      </if>
      <if test="hiredate != null">
        #{hiredate,jdbcType=TIMESTAMP},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
<!--  <select id="findOne" resultType="com.first.group.entity.UserInformation">-->

<!--    select userid,username,gender,birthday,address,tel,email,photo from user_information-->
<!--    <where>-->
<!--      <if test="_parameter!=null">-->
<!--        userid=#{userid}-->
<!--      </if>-->
<!--    </where>-->

<!--  </select>-->
  <delete id="deleteUser" parameterType="com.first.group.entity.UserInformation">
    delete from user_information where userid = #{userid}
  </delete>

  <update id="updateUser" parameterType="com.first.group.entity.UserInformation">
    update user_information set username = #{username}, gender= #{gender},
    birthday = #{birthday},
    address = #{address},
    tel = #{tel}, email = #{email},
    photo = #{photo},hiredate = #{hiredate},
    password = #{password}
    where userid = #{userid};
  </update>


  <select id="findAllUser" resultType="com.first.group.entity.UserInformation">
    select userid,username,gender,birthday,address,tel,email,photo,hiredate,position from user_information
  </select>




  <select id="findOne" resultType="com.first.group.entity.UserInformation">
    select userid,username,
    gender, birthday,
    address, tel,
    email, photo,hiredate,position,password
    FROM user_information
    <where>
      <if test="_parameter!=null">
        userid=#{userid}
      </if>
    </where>
  </select>


  <select id="comparePassword" resultMap="UserLoginResultMap">
    select user_information.userid,user_information.username,
    user_information.gender,
    user_information.birthday,
    user_information.address,
    user_information.tel,
    user_information.email,
    user_information. photo,
    user_information.hiredate,
    user_information.position,
    `user_roles`.id,
    `user_roles`.roleid
    FROM user_information  LEFT JOIN `user_roles` ON `user_roles`.userid=user_information.userid
    <where>
      <if test="userid!=null">
        AND	user_information.userid=#{userid}
      </if>
      <if test="password!=null">
        AND	user_information.password=#{password}
      </if>
    </where>
  </select>

  <select id="showWages" resultMap="UserWagesResultMap">
    select user_information.userid,
    user_information.username,
    `user_wages`.userid,
    `user_wages`.wageid,
    `user_wages`.wages,
    `user_wages`.reward,
    `user_wages`.date
    FROM user_information  LEFT JOIN `user_wages` ON `user_wages`.userid=user_information.userid
    <where>
      <if test="_parameter!=null">
        AND	user_information.userid=#{userid}
      </if>
    </where>
  </select>
</mapper>